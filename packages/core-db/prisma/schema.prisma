generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TalentProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stageName            String?
  dateOfBirth          DateTime?
  gender               String?
  height               Int?
  weight               Int?
  eyeColor             String?
  hairColor            String?
  skills               String[]  @default([])
  languages            String[]  @default([])
  experience           Int?
  city                 String?
  willingToTravel      Boolean   @default(false)
  portfolioUrl         String?
  demoReelUrl          String?
  instagramUrl         String?
  isMinor              Boolean   @default(false)
  guardianUserId       String?
  verified             Boolean   @default(false)
  rating               Float?
  completionPercentage Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // ✅ Relations with foreign keys
  user                 User      @relation("TalentProfile", fields: [userId], references: [id], onDelete: Cascade)
  guardian             User?     @relation("GuardianRelation", fields: [guardianUserId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([guardianUserId])
}

model CasterProfile {
  id                     String             @id @default(cuid())
  userId                 String             @unique
  companyType            String?
  commercialRegistration String?
  businessPhone          String?
  businessEmail          String?
  website                String?
  city                   String?
  teamSize               Int?
  specializations        String[]           @default([])
  verified               Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  address                String?
  averageRating          Float?
  bannerUrl              String?
  companyCategory        String?
  companyDescription     String?
  companyNameAr          String?
  companyNameEn          String?
  companySize            String?
  complianceStatus       String             @default("pending")
  establishedYear        Int?
  facebookUrl            String?
  instagramUrl           String?
  lastComplianceCheck    DateTime?
  licenseAuthorities     String[]           @default([])
  licenseNumbers         String[]           @default([])
  linkedinUrl            String?
  logoUrl                String?
  reviewCount            Int                @default(0)
  showreelUrl            String?
  totalHires             Int                @default(0)
  totalJobsPosted        Int                @default(0)
  twitterUrl             String?
  typeSpecificFields     Json?
  verificationDocuments  String[]           @default([])
  verifiedAt             DateTime?
  profileType            String             @default("basic")
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects               CasterProject[]
  reviews                CasterReview[]
  teamMembers            CasterTeamMember[]
}

model CasterProject {
  id                 String        @id @default(cuid())
  casterProfileId    String
  projectName        String
  projectType        String
  clientName         String?
  projectYear        Int
  projectDescription String?
  projectUrl         String?
  imageUrls          String[]      @default([])
  videoUrl           String?
  featured           Boolean       @default(false)
  displayOrder       Int           @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  casterProfile      CasterProfile @relation(fields: [casterProfileId], references: [id], onDelete: Cascade)

  @@index([casterProfileId])
  @@index([featured, displayOrder])
}

model CasterTeamMember {
  id              String        @id @default(cuid())
  casterProfileId String
  name            String
  role            String
  email           String?
  bio             String?
  imageUrl        String?
  permissions     String[]      @default([])
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  casterProfile   CasterProfile @relation(fields: [casterProfileId], references: [id], onDelete: Cascade)

  @@index([casterProfileId])
}

model CasterReview {
  id              String        @id @default(cuid())
  casterProfileId String
  talentUserId    String
  rating          Int
  reviewText      String?
  projectName     String?
  professionalism Int?
  communication   Int?
  paymentOnTime   Int?
  workEnvironment Int?
  isAnonymous     Boolean       @default(false)
  isVerified      Boolean       @default(false)
  verifiedHire    Boolean       @default(false)
  flagged         Boolean       @default(false)
  flagReason      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  casterProfile   CasterProfile @relation(fields: [casterProfileId], references: [id], onDelete: Cascade)

  @@index([casterProfileId])
  @@index([rating])
  @@index([isVerified])
}

model Application {
  id            String                   @id @default(cuid())
  castingCallId String
  talentUserId  String
  status        String                   @default("pending")
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  availability  String?
  contactPhone  String?
  coverLetter   String?
  headshotUrl   String?
  portfolioUrl  String?
  castingCall   CastingCall              @relation(fields: [castingCallId], references: [id])
  talentUser    User                     @relation("TalentApplications", fields: [talentUserId], references: [id])
  events        ApplicationStatusEvent[]
  booking       AuditionBooking?

  @@index([castingCallId, status])
  @@index([talentUserId, createdAt])
  @@index([status, createdAt])
}

model ApplicationStatusEvent {
  id            String      @id @default(cuid())
  applicationId String
  fromStatus    String?
  toStatus      String
  at            DateTime    @default(now())
  actorUserId   String?
  application   Application @relation(fields: [applicationId], references: [id])
}

model Outbox {
  id        BigInt   @id @default(autoincrement())
  eventType String
  payload   Json
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  lastError String?
  nextRunAt DateTime @default(now())
  status    String   @default("pending")
}

model AuditEvent {
  id           String   @id @default(cuid())
  eventType    String
  actorUserId  String?
  resourceType String?
  resourceId   String?
  ipAddress    String?
  userAgent    String?
  metadata     Json?
  success      Boolean  @default(true)
  errorMessage String?
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())

  // ✅ Relations with foreign keys
  actor        User?    @relation("AuditActor", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([actorUserId, timestamp])
  @@index([eventType, timestamp])
  @@index([resourceType, resourceId])
}

model RevokedToken {
  jti       String   @id
  createdAt DateTime @default(now())
}

model MediaAsset {
  id              String   @id @default(cuid())
  userId          String
  filename        String
  mimetype        String
  size            Int
  s3Key           String   @unique
  visibility      String   @default("private")
  status          String   @default("pending")
  pHash           String?
  watermark       String?
  ttlPolicy       String?
  virusScanResult Json?
  transcodeData   Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // ✅ Relations with foreign keys
  user            User     @relation("MediaAssets", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  price         Int
  currency      String         @default("SAR")
  features      Json
  isActive      Boolean        @default(true)
  moyasarPlanId String?        @unique
  subscriptions Subscription[]
}

model Subscription {
  id                    String                    @id @default(cuid())
  userId                String                    @unique
  planId                String
  status                String
  startDate             DateTime
  endDate               DateTime
  trialEndDate          DateTime?
  moyasarSubscriptionId String?                   @unique
  plan                  Plan                      @relation(fields: [planId], references: [id])
  events                SubscriptionStatusEvent[]
}

model SubscriptionStatusEvent {
  id             String       @id @default(cuid())
  subscriptionId String
  fromStatus     String?
  toStatus       String
  at             DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  password            String
  name                String
  role                String
  emailVerified       Boolean            @default(false)
  emailVerifiedAt     DateTime?
  phone               String?
  phoneVerified       Boolean            @default(false)
  phoneVerifiedAt     DateTime?
  avatar              String?
  bio                 String?
  isActive            Boolean            @default(true)
  lastLoginAt         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  nafathVerified      Boolean            @default(false)
  nafathVerifiedAt    DateTime?
  nafathNationalId    String?            @unique
  nafathTransactionId String?
  nafathData          Json?
  nafathExpiresAt     DateTime?
  
  // ✅ Issue #17: Account Lockout Protection
  failedLoginAttempts Int?               @default(0)
  lastFailedLoginAt   DateTime?
  accountLockedUntil  DateTime?
  
  // ✅ Issue #27: Email Verification
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  
  // ✅ Issue #28: Two-Factor Authentication
  twoFactorEnabled    Boolean            @default(false)
  twoFactorSecret     String?
  backupCodes         String[]           @default([])
  
  // ✅ Existing relations
  applications        Application[]      @relation("TalentApplications")
  casterBookings      AuditionBooking[]  @relation("CasterBookings")
  talentBookings      AuditionBooking[]  @relation("TalentBookings")
  availabilitySlots   AvailabilitySlot[]
  casterProfile       CasterProfile?
  createdCastingCalls CastingCall[]
  savedSearches       SavedSearch[]
  searchExecutions    SearchExecution[]
  searchHistory       SearchHistory[]
  casterShortlists    TalentShortlist[]  @relation("CasterShortlists")
  talentShortlists    TalentShortlist[]  @relation("TalentShortlists")

  // ✅ New foreign key relations (Issue #5)
  talentProfile       TalentProfile?     @relation("TalentProfile")
  guardiansFor        TalentProfile[]    @relation("GuardianRelation")
  auditEvents         AuditEvent[]       @relation("AuditActor")
  mediaAssets         MediaAsset[]       @relation("MediaAssets")
  receipts            Receipt[]          @relation("Receipts")
  conversations1      Conversation[]     @relation("Participant1")
  conversations2      Conversation[]     @relation("Participant2")
  sentMessages        Message[]          @relation("SentMessages")
  receivedMessages    Message[]          @relation("ReceivedMessages")
  notifications       Notification[]     @relation("Notifications")
}

model CastingCall {
  id               String            @id @default(cuid())
  title            String
  description      String?
  company          String?
  location         String?
  compensation     String?
  requirements     String?
  deadline         DateTime?
  contactInfo      String?
  status           String            @default("pending_review")
  sourceUrl        String?
  sourceName       String?
  contentHash      String?           @unique
  isAggregated     Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  attachments      String[]          @default([])
  createdBy        String?
  projectType      String?
  shootingDuration String?
  applications     Application[]
  bookings         AuditionBooking[]
  creator          User?             @relation(fields: [createdBy], references: [id])

  @@index([status, createdAt])
  @@index([location, status])
  @@index([deadline, status])
  @@index([isAggregated, status])
  @@index([createdBy, status])
}

model IngestionSource {
  id                String             @id @default(cuid())
  sourceType        String
  sourceIdentifier  String
  sourceName        String
  lastProcessedAt   DateTime?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // ✅ Relations
  processedMessages ProcessedMessage[]
}

model ProcessedMessage {
  id                String          @id @default(cuid())
  whatsappMessageId String          @unique
  sourceId          String
  processedAt       DateTime        @default(now())

  // ✅ Relations with foreign keys
  source            IngestionSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([whatsappMessageId])
  @@index([sourceId])
  @@index([processedAt])
}

model Receipt {
  id                String   @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Int      // Total amount in halalas (including VAT)
  amountBeforeVAT   Int?     // Amount before VAT in halalas
  vatAmount         Int?     // VAT amount in halalas
  vatRate           Float?   // VAT rate (e.g., 0.15 for 15%)
  currency          String
  provider          String   @default("moyasar")
  providerPaymentId String   @unique
  status            String
  raw               Json
  createdAt         DateTime @default(now())

  // ✅ Relations with foreign keys (RESTRICT to prevent deletion with receipts)
  user              User     @relation("Receipts", fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId])
}

model SavedSearch {
  id            String            @id @default(cuid())
  userId        String
  name          String
  description   String?
  searchTerm    String            @default("")
  filters       Json              @default("{}")
  sortBy        String            @default("relevance")
  sortOrder     String            @default("desc")
  isPublic      Boolean           @default(false)
  tags          String[]          @default([])
  notifications Json              @default("{}")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions    SearchExecution[]

  @@unique([userId, name])
}

model SearchExecution {
  id            String       @id @default(cuid())
  savedSearchId String?
  userId        String
  searchTerm    String
  filters       Json         @default("{}")
  resultsCount  Int
  executionTime Int
  createdAt     DateTime     @default(now())
  savedSearch   SavedSearch? @relation(fields: [savedSearchId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id             String    @id @default(cuid())
  participant1Id String
  participant2Id String
  lastMessageAt  DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]

  // ✅ Relations with foreign keys
  participant1   User      @relation("Participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2   User      @relation("Participant2", fields: [participant2Id], references: [id], onDelete: Cascade)

  @@unique([participant1Id, participant2Id])
  @@index([participant1Id])
  @@index([participant2Id])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // ✅ Relations with foreign keys
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  actionUrl String?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())

  // ✅ Relations with foreign keys
  user      User      @relation("Notifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model SearchHistory {
  id            String   @id @default(cuid())
  userId        String
  searchTerm    String
  filters       Json     @default("{}")
  resultsCount  Int
  executionTime Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TalentShortlist {
  id           String   @id @default(cuid())
  casterUserId String
  talentUserId String
  notes        String?
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  caster       User     @relation("CasterShortlists", fields: [casterUserId], references: [id], onDelete: Cascade)
  talent       User     @relation("TalentShortlists", fields: [talentUserId], references: [id], onDelete: Cascade)

  @@unique([casterUserId, talentUserId])
  @@index([casterUserId])
  @@index([talentUserId])
}

model AvailabilitySlot {
  id           String    @id @default(cuid())
  talentUserId String
  dayOfWeek    Int?
  startTime    String
  endTime      String
  timezone     String    @default("Asia/Riyadh")
  specificDate DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  talent       User      @relation(fields: [talentUserId], references: [id], onDelete: Cascade)

  @@index([talentUserId])
  @@index([dayOfWeek])
  @@index([specificDate])
}

model AuditionBooking {
  id                 String      @id @default(cuid())
  applicationId      String      @unique
  talentUserId       String
  casterUserId       String
  castingCallId      String
  scheduledAt        DateTime
  duration           Int
  timezone           String      @default("Asia/Riyadh")
  meetingType        String
  location           String?
  meetingUrl         String?
  meetingPassword    String?
  status             String      @default("scheduled")
  cancelledBy        String?
  cancelledAt        DateTime?
  cancellationReason String?
  reminderSent24h    Boolean     @default(false)
  reminderSent1h     Boolean     @default(false)
  casterNotes        String?
  talentNotes        String?
  calcomEventId      String?
  calcomBookingUid   String?     @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  application        Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  caster             User        @relation("CasterBookings", fields: [casterUserId], references: [id], onDelete: Cascade)
  castingCall        CastingCall @relation(fields: [castingCallId], references: [id], onDelete: Cascade)
  talent             User        @relation("TalentBookings", fields: [talentUserId], references: [id], onDelete: Cascade)

  @@index([talentUserId])
  @@index([casterUserId])
  @@index([castingCallId])
  @@index([scheduledAt])
  @@index([status])
}

model LlmLearningPattern {
  id            String    @id @default(cuid())
  pattern       String
  type          String    // 'talent_keyword', 'project_keyword', 'contact_keyword', 'payment_keyword', 'location_keyword'
  confidence    Float     @default(0.5)
  occurrences   Int       @default(0)
  lastSeen      DateTime
  examples      String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([pattern, type])
  @@index([confidence])
  @@index([type])
}

model LlmFeedback {
  id                String    @id @default(cuid())
  originalText      String
  wasMissed         Boolean
  correctClassification Boolean
  extractedPatterns String[]
  userFeedback      String?   // 'correct', 'incorrect'
  timestamp         DateTime
  createdAt         DateTime  @default(now())

  @@index([timestamp])
}
