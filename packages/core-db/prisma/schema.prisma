// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TalentProfile {
  id             String  @id @default(cuid())
  userId         String  @unique
  isMinor        Boolean @default(false)
  guardianUserId String?
  verified       Boolean @default(false)
  // ... other talent fields
}

model Application {
  id             String   @id @default(cuid())
  castingCallId  String
  talentUserId   String
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  events         ApplicationStatusEvent[]
}

model ApplicationStatusEvent {
  id            String      @id @default(cuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  fromStatus    String?
  toStatus      String
  at            DateTime    @default(now())
  actorUserId   String?
}

model Outbox {
  id        BigInt   @id @default(autoincrement())
  eventType String
  payload   Json
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  lastError String?
  nextRunAt DateTime @default(now())
  status    String   @default("pending") // pending|processing|dead
}

model AuditEvent {
  id              String   @id @default(cuid())
  purpose         String
  actor_role      String
  ip              String
  ua              String
  before_after_hash String
  createdAt       DateTime @default(now())
  // ... other audit fields
}

model RevokedToken {
  jti       String   @id
  createdAt DateTime @default(now())
}

model MediaAsset {
  id         String   @id @default(cuid())
  userId     String // The user who uploaded the file
  filename   String
  mimetype   String
  size       Int
  s3Key      String   @unique
  visibility String   @default("private") // private | public | unlisted
  status     String   @default("pending") // pending | uploaded | processing | ready | error
  pHash      String?
  watermark  String? // Tamper-evident watermark for self-tapes
  ttlPolicy  String?  // e.g., "archive_180d"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @unique
  price       Int // in halalas to avoid floating point issues
  currency    String   @default("SAR")
  features    Json
  isActive    Boolean  @default(true)
  moyasarPlanId String?  @unique // ID from Moyasar's system
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String   @unique
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  status      String   // e.g., "active", "past_due", "canceled"
  startDate   DateTime
  endDate     DateTime
  trialEndDate DateTime?
  events      SubscriptionStatusEvent[]
  moyasarSubscriptionId String? @unique
}

model SubscriptionStatusEvent {
  id             String   @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  fromStatus     String?
  toStatus       String
  at             DateTime @default(now())
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ... other models from your plan (Users, CastingCall, etc.) will go here

model Receipt {
  id                String   @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Int
  currency          String
  provider          String   @default("moyasar")
  providerPaymentId String   @unique
  status            String
  raw               Json
  createdAt         DateTime @default(now())
}
