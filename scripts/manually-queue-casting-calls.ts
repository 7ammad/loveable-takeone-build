/**
 * Manually Queue Found Casting Calls
 * Queue the 2 perfect Saudi casting calls we found for LLM processing
 */

import 'dotenv/config';
import { scrapedRolesQueue } from '@packages/core-queue';
import { prisma } from '@packages/core-db';

async function queueFoundCastingCalls() {
  console.log('üì§ Manually queuing found casting calls...\n');

  try {
    // Get the source IDs for WhatsApp groups
    const whatsappSources = await prisma.ingestionSource.findMany({
      where: {
        sourceType: 'WHATSAPP',
        isActive: true
      }
    });

    const sourceMap = new Map();
    whatsappSources.forEach(source => {
      sourceMap.set(source.sourceIdentifier, source.id);
    });

    // The 2 perfect casting calls we found
    const castingCalls = [
      {
        groupId: '120363321492808704@g.us', // Actors & Actresses
        messageId: 'P5V4dT2B_XFOXA-gvABq53NnZCkAA',
        text: `ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ ÿ¨ŸÖŸäÿπÿßŸã

ÿßŸÑÿ™ÿµŸàŸäÿ± ŸÅŸä ÿßŸÑÿ±Ÿäÿßÿ∂ üî¥

ÿπŸÜÿØŸÜÿß ÿ™ÿµŸàŸäÿ± ŸÅŸä ÿ™ÿßÿ±ŸäÿÆ 13  ÿßŸà 14 ÿßŸà 15 ÿßŸÉÿ™Ÿàÿ®ÿ± üî¥

ÿßÿ≠ÿ™ÿßÿ¨ ÿ®ŸÜÿßÿ™ ÿßŸÉÿ≥ÿ™ÿ±ÿß ŸÖŸÜ ÿπŸÖÿ± 20-40 üî¥

ÿßŸÑŸÖÿ®ŸÑÿ∫  200 üî¥


ÿ±ŸÇŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ
+966 58 188 3051`,
        timestamp: '2025-10-09T17:33:27.000Z'
      },
      {
        groupId: '120363321492808704@g.us', // Actors & Actresses  
        messageId: 'OtwBFKDsNMvAgw-gggBq53guz9QKA',
        text: `üì£ ŸÅÿ±ÿµÿ© ÿ™ÿµŸàŸäÿ± ŸÅŸä ÿ¨ÿØÿ©! üé¨

ŸÜÿ®ÿ≠ÿ´ ÿπŸÜ ÿ®ŸÜÿßÿ™ ŸÑŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ŸÅŸä ÿ™ÿµŸàŸäÿ± ÿ•ÿπŸÑÿßŸÜ ŸÅŸä ŸÖÿØŸäŸÜÿ© ÿ¨ÿØÿ© ŸÜŸáÿßŸäÿ© ÿ¥Ÿáÿ± ÿ£ŸÉÿ™Ÿàÿ®ÿ± (ÿßŸÑŸÖŸàÿπÿØ ÿßŸÑÿØŸÇŸäŸÇ ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ£ŸÉŸäÿØŸá ŸÑÿßÿ≠ŸÇŸãÿß).                                 

üí∞ ÿßŸÑÿ£ÿ¨ÿ±: 1500 ÿ±ŸäÿßŸÑ
üïí ŸÖÿØÿ© ÿßŸÑÿπŸÖŸÑ: 12 ÿ≥ÿßÿπÿ©
‚öΩÔ∏è ÿßŸÑÿ¥ÿ±ÿ∑ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä: ŸÖÿπÿ±ŸÅÿ© ÿ®ÿ£ÿ≥ÿßÿ≥Ÿäÿßÿ™ ŸÉÿ±ÿ© ÿßŸÑŸÇÿØŸÖ ŸÅŸÇÿ∑ (ŸÑŸäÿ≥ ŸÑÿπÿ®Ÿãÿß ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäŸã  ÿß)                                                                 
ŸàŸÅÿ™ÿßŸá ÿ≥ÿπŸàÿØŸäŸá

ÿ•ÿ∞ÿß ŸÉŸÜÿ™Ÿê ŸÖŸáÿ™ŸÖÿ©ÿå ÿ£ÿ±ÿ≥ŸÑŸä ŸÑŸÜÿß ÿµŸàÿ±ŸÉ ÿßŸÑÿ≠ÿØŸäÿ´ÿ© + ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ÿπŸÑŸâ ÿßŸÑŸàÿßÿ™ÿ≥ÿßÿ®`,
        timestamp: '2025-10-09T17:14:33.000Z'
      }
    ];

    let queued = 0;

    for (const call of castingCalls) {
      const sourceId = sourceMap.get(call.groupId);
      if (!sourceId) {
        console.log(`‚ùå No source ID found for group ${call.groupId}`);
        continue;
      }

      try {
        // Queue for LLM processing
        await scrapedRolesQueue.add('whatsapp-message', {
          sourceId: sourceId,
          sourceUrl: `whatsapp://group/${call.groupId}/message/${call.messageId}`,
          rawMarkdown: call.text,
          scrapedAt: call.timestamp
        });

        console.log(`‚úÖ Queued casting call ${call.messageId}`);
        console.log(`   Preview: ${call.text.substring(0, 100)}...`);
        console.log(`   Source: ${call.groupId}`);
        console.log('');

        queued++;

      } catch (error) {
        console.error(`‚ùå Failed to queue ${call.messageId}:`, error);
      }
    }

    console.log(`üéØ Successfully queued ${queued}/${castingCalls.length} casting calls for LLM processing!`);

    // Check queue status
    const waiting = await scrapedRolesQueue.getWaiting();
    const active = await scrapedRolesQueue.getActive();
    
    console.log(`\nüìä Queue Status:`);
    console.log(`   Waiting: ${waiting.length}`);
    console.log(`   Active: ${active.length}`);

    if (waiting.length > 0) {
      console.log(`\nüí° The Digital Twin workers will process these automatically.`);
      console.log(`   Check the admin dashboard or queue status to see progress.`);
    }

  } catch (error) {
    console.error('‚ùå Error queuing casting calls:', error);
  } finally {
    await prisma.$disconnect();
  }
}

queueFoundCastingCalls();

